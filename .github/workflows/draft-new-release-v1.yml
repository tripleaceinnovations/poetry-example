name: "GitFlow-v1 Draft new release"

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'The version you want to release.'
        required: true
      # branch_version:
      #   description: 'The branch version for release branch.'
      #   required: true

jobs:
  draft-new-release:
    name: "Draft a new release"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Create release branch
        run: |
          # for remote in `git branch -r`; do git branch --track ${remote#origin/} $remote; done
          git branch
          last_release_branch_prefix=`git branch -r | grep release | sort --version-sort | tail -1 | awk -F "-" '{ sub(/^[ \t]+/, ""); print $1 }' | awk -F'/' '{print $2}'`
          new_release_branch_prefix=`git branch -r | grep release | sort --version-sort | tail -1 | awk -F "-" '{ sub(/^[ \t]+/, ""); print $1 }' | awk -F'/' '{print $2 + 1}'`
          echo "Previous release branch prefix is $last_release_branch_prefix"
          echo "New release branch prefix is $new_release_branch_prefix"

          release_branch=${new_release_branch_prefix}-release
          echo "Release branch is ${release_branch}"
          echo "RELEASE_BRANCH=${release_branch}" >> $GITHUB_ENV
          git checkout -b ${release_branch}
          git branch
        shell: bash

      # In order to make a commit, we need to initialize a user.
      # You may choose to write something less generic here if you want, it doesn't matter functionality wise.
      - name: Initialize mandatory git config
        run: |
          git config user.name "GitHub actions"
          git config user.email "dexy004@gmail.com"

      # This step will differ depending on your project setup
      - name: Bump version in pyproject.toml
        run: sed -i "/\[tool.poetry\]/,/^$/ s/version.*/version = \"${{ github.event.inputs.version }}\"/" pyproject.toml

      - name: Commit changes
        id: commit-changes
        run: |
          git status
          git add pyproject.toml
          git commit -m "Bump up version to ${{ github.event.inputs.version }}"
          echo "::set-output name=commit::$(git rev-parse HEAD)"

      - name: Push new branch
        run: git push origin -u ${{ env.RELEASE_BRANCH }}
        # git push --set-upstream origin "$branch_name"

      - name: Create pull request
        uses: thomaseizinger/create-pull-request@1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          head:  ${{ env.RELEASE_BRANCH }}
          base: main
          title: Release version ${{ github.event.inputs.version }}
          reviewers: ${{ github.actor }} # By default, we request a review from the person who triggered the workflow.
          # Write a nice message to the user.
          # We are claiming things here based on the `publish-new-release.yml` workflow.
          # You should obviously adopt it to say the truth depending on your release workflow :)
          body: |
            Hi @${{ github.actor }}!
            This PR was created in response to a manual trigger of the release workflow here: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}.
            Bumped the versions in the pyproject.toml files in this commit: ${{ steps.commit-changes.outputs.commit }}.
            Merging this PR will create a GitHub release and upload any assets that are created as part of the release build.